<%
const Tag = (tag) => {
    return `<div class='tag bg-gray-100 dark:bg-black'>
                              <a class="min-w-max" style="inline-size: max-content" href="${url_for(tag.path)}" target="_self" title="${isFriend ? tag.desc : ''}">
                                  ${isFriend ? `<img class="w-8 h-8 rounded-full inline-block" src=${url_for(tag.avatar)} />` : `<i class='ri-hashtag' style="color: var(--roy-theme)"></i>`}
                                  <span>${tag.name}</span>
                                  ${isFriend ? '' : `<span>(${tag.length})</span>`}
                              </a>
                            </div>`
}
let TAGS = tagList;
const DURATION = 15000;
const ROWS = 7;
const TAGS_PER_ROW = 10;
const random = (min, max) => Math.floor(Math.random() * (max - min)) + min;
const shuffle = (arr) => [...arr].sort(() => .5 - Math.random());
const InfiniteLoopSlider = ({ children, duration, reverse = false }) => {
    return `
                        <div class='loop-slider' style="
                            --duration: ${duration}ms;
                            --direction: ${reverse ? 'reverse' : 'normal'};
                        ">
                            <div class='inner'>
                                ${children}
                                ${children}
                            </div>
                        </div>
                    `;
};
const render = () => {
    return [...new Array(ROWS)].map((_, i) => {
        const infiniteLoopSliderProps = {
            children: shuffle(TAGS).slice(0, TAGS_PER_ROW).map(tag => {
                return Tag(tag)
            }).join('\n'),
            duration: random(DURATION - 5000, DURATION + 5000),
            reverse: i % 2
        }
        return InfiniteLoopSlider(infiniteLoopSliderProps)
    }).join('\n')
}
%>
<div id="tags" class="tag-list">
    <%- render() %>
    <div class='fade'></div>
</div>
<style>
  .tag-list {
    width: 100%;
    white-space: nowrap;
    display: flex;
    flex-shrink: 0;
    flex-direction: column;
    gap: 1rem 0;
    position: relative;
    padding: 1.5rem 0;
    overflow: hidden;
  }

  .loop-slider .inner {
    display: flex;
    width: fit-content;
    animation-name: loop;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-direction: var(--direction);
    animation-duration: var(--duration);
  }

  .tag {
    display: flex;
    align-items: center;
    gap: 0 0.2rem;
    font-size: 0.9rem;
    border-radius: 0.4rem;
    padding: 0.7rem 1rem;
    margin-right: 1rem;
    cursor: pointer;
  }

  .inner:hover {
    animation-play-state: paused;
  }

  .tag a {
    font-size: 0.9rem;
    padding: 0;
    margin: 0;
  }

  .fade {
    pointer-events: none;
    background: linear-gradient(90deg, #ffffff, transparent 30%, transparent 70%, #ffffff);
    position: absolute;
    inset: 0;
  }

  .dark .fade {
    background: linear-gradient(90deg, #18181b, transparent 30%, transparent 70%, #18181b);
  }

  @keyframes loop {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }
</style>
